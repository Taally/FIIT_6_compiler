// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  IRU-TAULING
// DateTime: 15.03.2020 22:01:00
// UserName: ??????
// Input file <SimpleYacc.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace SimpleParser
{
public enum Tokens {
    error=1,EOF=2,BEGIN=3,END=4,INUM=5,RNUM=6,
    ID=7,ASSIGN=8,SEMICOLON=9,COMMA=10,FOR=11,PLUS=12,
    MINUS=13,MULT=14,DIV=15,LPAR=16,RPAR=17,WHILE=18,
    IF=19,ELSE=20,INPUT=21,PRINT=22,VAR=23,OR=24,
    AND=25,EQUAL=26,NOTEQUAL=27,LESS=28,GREATER=29,EQGREATER=30,
    EQLESS=31,GOTO=32,COLON=33,BOOL=34};

// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<int,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public class Parser: ShiftReduceParser<int, LexLocation>
{
  // Verbatim content from SimpleYacc.y
    public Parser(AbstractScanner<int, LexLocation> scanner) : base(scanner) { }
  // End verbatim content from SimpleYacc.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[53];
  private static State[] states = new State[100];
  private static string[] nonTerms = new string[] {
      "progr", "$accept", "stlist", "statement", "assign", "for", "while", "if", 
      "input", "print", "var", "label", "goto", "ident", "expr", "A", "B", "C", 
      "E", "T", "F", "block", "exprlist", "varlist", };

  static Parser() {
    states[0] = new State(new int[]{7,23,11,48,18,57,19,61,21,67,22,73,23,82,5,89,32,93},new int[]{-1,1,-3,3,-4,99,-5,5,-14,6,-6,47,-7,56,-8,60,-9,66,-10,72,-11,81,-12,88,-13,92});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{7,23,11,48,18,57,19,61,21,67,22,73,23,82,5,89,32,93,2,-2},new int[]{-4,4,-5,5,-14,6,-6,47,-7,56,-8,60,-9,66,-10,72,-11,81,-12,88,-13,92});
    states[4] = new State(-4);
    states[5] = new State(-5);
    states[6] = new State(new int[]{8,7});
    states[7] = new State(new int[]{7,23,5,24,16,25,34,38},new int[]{-15,8,-16,28,-17,29,-18,46,-19,45,-20,40,-21,39,-14,22});
    states[8] = new State(new int[]{9,9,24,10});
    states[9] = new State(-15);
    states[10] = new State(new int[]{7,23,5,24,16,25,34,38},new int[]{-16,11,-17,29,-18,46,-19,45,-20,40,-21,39,-14,22});
    states[11] = new State(new int[]{25,12,9,-16,24,-16,17,-16,7,-16,11,-16,18,-16,19,-16,21,-16,22,-16,23,-16,5,-16,32,-16,3,-16,10,-16});
    states[12] = new State(new int[]{7,23,5,24,16,25,34,38},new int[]{-17,13,-18,46,-19,45,-20,40,-21,39,-14,22});
    states[13] = new State(new int[]{26,14,27,30,25,-18,9,-18,24,-18,17,-18,7,-18,11,-18,18,-18,19,-18,21,-18,22,-18,23,-18,5,-18,32,-18,3,-18,10,-18});
    states[14] = new State(new int[]{7,23,5,24,16,25,34,38},new int[]{-18,15,-19,45,-20,40,-21,39,-14,22});
    states[15] = new State(new int[]{29,16,28,32,30,41,31,43,26,-20,27,-20,25,-20,9,-20,24,-20,17,-20,7,-20,11,-20,18,-20,19,-20,21,-20,22,-20,23,-20,5,-20,32,-20,3,-20,10,-20});
    states[16] = new State(new int[]{7,23,5,24,16,25,34,38},new int[]{-19,17,-20,40,-21,39,-14,22});
    states[17] = new State(new int[]{12,18,13,34,29,-23,28,-23,30,-23,31,-23,26,-23,27,-23,25,-23,9,-23,24,-23,17,-23,7,-23,11,-23,18,-23,19,-23,21,-23,22,-23,23,-23,5,-23,32,-23,3,-23,10,-23});
    states[18] = new State(new int[]{7,23,5,24,16,25,34,38},new int[]{-20,19,-21,39,-14,22});
    states[19] = new State(new int[]{14,20,15,36,12,-28,13,-28,29,-28,28,-28,30,-28,31,-28,26,-28,27,-28,25,-28,9,-28,24,-28,17,-28,7,-28,11,-28,18,-28,19,-28,21,-28,22,-28,23,-28,5,-28,32,-28,3,-28,10,-28});
    states[20] = new State(new int[]{7,23,5,24,16,25,34,38},new int[]{-21,21,-14,22});
    states[21] = new State(-31);
    states[22] = new State(-34);
    states[23] = new State(-14);
    states[24] = new State(-35);
    states[25] = new State(new int[]{7,23,5,24,16,25,34,38},new int[]{-15,26,-16,28,-17,29,-18,46,-19,45,-20,40,-21,39,-14,22});
    states[26] = new State(new int[]{17,27,24,10});
    states[27] = new State(-36);
    states[28] = new State(new int[]{25,12,9,-17,24,-17,17,-17,7,-17,11,-17,18,-17,19,-17,21,-17,22,-17,23,-17,5,-17,32,-17,3,-17,10,-17});
    states[29] = new State(new int[]{26,14,27,30,25,-19,9,-19,24,-19,17,-19,7,-19,11,-19,18,-19,19,-19,21,-19,22,-19,23,-19,5,-19,32,-19,3,-19,10,-19});
    states[30] = new State(new int[]{7,23,5,24,16,25,34,38},new int[]{-18,31,-19,45,-20,40,-21,39,-14,22});
    states[31] = new State(new int[]{29,16,28,32,30,41,31,43,26,-21,27,-21,25,-21,9,-21,24,-21,17,-21,7,-21,11,-21,18,-21,19,-21,21,-21,22,-21,23,-21,5,-21,32,-21,3,-21,10,-21});
    states[32] = new State(new int[]{7,23,5,24,16,25,34,38},new int[]{-19,33,-20,40,-21,39,-14,22});
    states[33] = new State(new int[]{12,18,13,34,29,-24,28,-24,30,-24,31,-24,26,-24,27,-24,25,-24,9,-24,24,-24,17,-24,7,-24,11,-24,18,-24,19,-24,21,-24,22,-24,23,-24,5,-24,32,-24,3,-24,10,-24});
    states[34] = new State(new int[]{7,23,5,24,16,25,34,38},new int[]{-20,35,-21,39,-14,22});
    states[35] = new State(new int[]{14,20,15,36,12,-29,13,-29,29,-29,28,-29,30,-29,31,-29,26,-29,27,-29,25,-29,9,-29,24,-29,17,-29,7,-29,11,-29,18,-29,19,-29,21,-29,22,-29,23,-29,5,-29,32,-29,3,-29,10,-29});
    states[36] = new State(new int[]{7,23,5,24,16,25,34,38},new int[]{-21,37,-14,22});
    states[37] = new State(-32);
    states[38] = new State(-37);
    states[39] = new State(-33);
    states[40] = new State(new int[]{14,20,15,36,12,-30,13,-30,29,-30,28,-30,30,-30,31,-30,26,-30,27,-30,25,-30,9,-30,24,-30,17,-30,7,-30,11,-30,18,-30,19,-30,21,-30,22,-30,23,-30,5,-30,32,-30,3,-30,10,-30});
    states[41] = new State(new int[]{7,23,5,24,16,25,34,38},new int[]{-19,42,-20,40,-21,39,-14,22});
    states[42] = new State(new int[]{12,18,13,34,29,-25,28,-25,30,-25,31,-25,26,-25,27,-25,25,-25,9,-25,24,-25,17,-25,7,-25,11,-25,18,-25,19,-25,21,-25,22,-25,23,-25,5,-25,32,-25,3,-25,10,-25});
    states[43] = new State(new int[]{7,23,5,24,16,25,34,38},new int[]{-19,44,-20,40,-21,39,-14,22});
    states[44] = new State(new int[]{12,18,13,34,29,-26,28,-26,30,-26,31,-26,26,-26,27,-26,25,-26,9,-26,24,-26,17,-26,7,-26,11,-26,18,-26,19,-26,21,-26,22,-26,23,-26,5,-26,32,-26,3,-26,10,-26});
    states[45] = new State(new int[]{12,18,13,34,29,-27,28,-27,30,-27,31,-27,26,-27,27,-27,25,-27,9,-27,24,-27,17,-27,7,-27,11,-27,18,-27,19,-27,21,-27,22,-27,23,-27,5,-27,32,-27,3,-27,10,-27});
    states[46] = new State(new int[]{29,16,28,32,30,41,31,43,26,-22,27,-22,25,-22,9,-22,24,-22,17,-22,7,-22,11,-22,18,-22,19,-22,21,-22,22,-22,23,-22,5,-22,32,-22,3,-22,10,-22});
    states[47] = new State(-6);
    states[48] = new State(new int[]{7,23},new int[]{-14,49});
    states[49] = new State(new int[]{8,50});
    states[50] = new State(new int[]{5,51});
    states[51] = new State(new int[]{10,52});
    states[52] = new State(new int[]{5,53});
    states[53] = new State(new int[]{7,23,11,48,18,57,19,61,21,67,22,73,23,82,5,89,32,93,3,96},new int[]{-22,54,-4,55,-5,5,-14,6,-6,47,-7,56,-8,60,-9,66,-10,72,-11,81,-12,88,-13,92});
    states[54] = new State(-40);
    states[55] = new State(-38);
    states[56] = new State(-7);
    states[57] = new State(new int[]{7,23,5,24,16,25,34,38},new int[]{-15,58,-16,28,-17,29,-18,46,-19,45,-20,40,-21,39,-14,22});
    states[58] = new State(new int[]{24,10,7,23,11,48,18,57,19,61,21,67,22,73,23,82,5,89,32,93,3,96},new int[]{-22,59,-4,55,-5,5,-14,6,-6,47,-7,56,-8,60,-9,66,-10,72,-11,81,-12,88,-13,92});
    states[59] = new State(-41);
    states[60] = new State(-8);
    states[61] = new State(new int[]{7,23,5,24,16,25,34,38},new int[]{-15,62,-16,28,-17,29,-18,46,-19,45,-20,40,-21,39,-14,22});
    states[62] = new State(new int[]{24,10,7,23,11,48,18,57,19,61,21,67,22,73,23,82,5,89,32,93,3,96},new int[]{-22,63,-4,55,-5,5,-14,6,-6,47,-7,56,-8,60,-9,66,-10,72,-11,81,-12,88,-13,92});
    states[63] = new State(new int[]{20,64,7,-43,11,-43,18,-43,19,-43,21,-43,22,-43,23,-43,5,-43,32,-43,2,-43,4,-43});
    states[64] = new State(new int[]{7,23,11,48,18,57,19,61,21,67,22,73,23,82,5,89,32,93,3,96},new int[]{-22,65,-4,55,-5,5,-14,6,-6,47,-7,56,-8,60,-9,66,-10,72,-11,81,-12,88,-13,92});
    states[65] = new State(-42);
    states[66] = new State(-9);
    states[67] = new State(new int[]{16,68});
    states[68] = new State(new int[]{7,23},new int[]{-14,69});
    states[69] = new State(new int[]{17,70});
    states[70] = new State(new int[]{9,71});
    states[71] = new State(-44);
    states[72] = new State(-10);
    states[73] = new State(new int[]{16,74});
    states[74] = new State(new int[]{7,23,5,24,16,25,34,38},new int[]{-23,75,-15,80,-16,28,-17,29,-18,46,-19,45,-20,40,-21,39,-14,22});
    states[75] = new State(new int[]{17,76,10,78});
    states[76] = new State(new int[]{9,77});
    states[77] = new State(-47);
    states[78] = new State(new int[]{7,23,5,24,16,25,34,38},new int[]{-15,79,-16,28,-17,29,-18,46,-19,45,-20,40,-21,39,-14,22});
    states[79] = new State(new int[]{24,10,17,-46,10,-46});
    states[80] = new State(new int[]{24,10,17,-45,10,-45});
    states[81] = new State(-11);
    states[82] = new State(new int[]{7,23},new int[]{-24,83,-14,87});
    states[83] = new State(new int[]{9,84,10,85});
    states[84] = new State(-50);
    states[85] = new State(new int[]{7,23},new int[]{-14,86});
    states[86] = new State(-49);
    states[87] = new State(-48);
    states[88] = new State(-12);
    states[89] = new State(new int[]{33,90});
    states[90] = new State(new int[]{7,23,11,48,18,57,19,61,21,67,22,73,23,82,5,89,32,93},new int[]{-4,91,-5,5,-14,6,-6,47,-7,56,-8,60,-9,66,-10,72,-11,81,-12,88,-13,92});
    states[91] = new State(-52);
    states[92] = new State(-13);
    states[93] = new State(new int[]{5,94});
    states[94] = new State(new int[]{9,95});
    states[95] = new State(-51);
    states[96] = new State(new int[]{7,23,11,48,18,57,19,61,21,67,22,73,23,82,5,89,32,93},new int[]{-3,97,-4,99,-5,5,-14,6,-6,47,-7,56,-8,60,-9,66,-10,72,-11,81,-12,88,-13,92});
    states[97] = new State(new int[]{4,98,7,23,11,48,18,57,19,61,21,67,22,73,23,82,5,89,32,93},new int[]{-4,4,-5,5,-14,6,-6,47,-7,56,-8,60,-9,66,-10,72,-11,81,-12,88,-13,92});
    states[98] = new State(-39);
    states[99] = new State(-3);

    rules[1] = new Rule(-2, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-3, new int[]{-4});
    rules[4] = new Rule(-3, new int[]{-3,-4});
    rules[5] = new Rule(-4, new int[]{-5});
    rules[6] = new Rule(-4, new int[]{-6});
    rules[7] = new Rule(-4, new int[]{-7});
    rules[8] = new Rule(-4, new int[]{-8});
    rules[9] = new Rule(-4, new int[]{-9});
    rules[10] = new Rule(-4, new int[]{-10});
    rules[11] = new Rule(-4, new int[]{-11});
    rules[12] = new Rule(-4, new int[]{-12});
    rules[13] = new Rule(-4, new int[]{-13});
    rules[14] = new Rule(-14, new int[]{7});
    rules[15] = new Rule(-5, new int[]{-14,8,-15,9});
    rules[16] = new Rule(-15, new int[]{-15,24,-16});
    rules[17] = new Rule(-15, new int[]{-16});
    rules[18] = new Rule(-16, new int[]{-16,25,-17});
    rules[19] = new Rule(-16, new int[]{-17});
    rules[20] = new Rule(-17, new int[]{-17,26,-18});
    rules[21] = new Rule(-17, new int[]{-17,27,-18});
    rules[22] = new Rule(-17, new int[]{-18});
    rules[23] = new Rule(-18, new int[]{-18,29,-19});
    rules[24] = new Rule(-18, new int[]{-18,28,-19});
    rules[25] = new Rule(-18, new int[]{-18,30,-19});
    rules[26] = new Rule(-18, new int[]{-18,31,-19});
    rules[27] = new Rule(-18, new int[]{-19});
    rules[28] = new Rule(-19, new int[]{-19,12,-20});
    rules[29] = new Rule(-19, new int[]{-19,13,-20});
    rules[30] = new Rule(-19, new int[]{-20});
    rules[31] = new Rule(-20, new int[]{-20,14,-21});
    rules[32] = new Rule(-20, new int[]{-20,15,-21});
    rules[33] = new Rule(-20, new int[]{-21});
    rules[34] = new Rule(-21, new int[]{-14});
    rules[35] = new Rule(-21, new int[]{5});
    rules[36] = new Rule(-21, new int[]{16,-15,17});
    rules[37] = new Rule(-21, new int[]{34});
    rules[38] = new Rule(-22, new int[]{-4});
    rules[39] = new Rule(-22, new int[]{3,-3,4});
    rules[40] = new Rule(-6, new int[]{11,-14,8,5,10,5,-22});
    rules[41] = new Rule(-7, new int[]{18,-15,-22});
    rules[42] = new Rule(-8, new int[]{19,-15,-22,20,-22});
    rules[43] = new Rule(-8, new int[]{19,-15,-22});
    rules[44] = new Rule(-9, new int[]{21,16,-14,17,9});
    rules[45] = new Rule(-23, new int[]{-15});
    rules[46] = new Rule(-23, new int[]{-23,10,-15});
    rules[47] = new Rule(-10, new int[]{22,16,-23,17,9});
    rules[48] = new Rule(-24, new int[]{-14});
    rules[49] = new Rule(-24, new int[]{-24,10,-14});
    rules[50] = new Rule(-11, new int[]{23,-24,9});
    rules[51] = new Rule(-13, new int[]{32,5,9});
    rules[52] = new Rule(-12, new int[]{5,33,-4});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
